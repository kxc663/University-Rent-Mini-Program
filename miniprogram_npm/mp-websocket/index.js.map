{"version":3,"sources":["index.js","utils.js","connectSocket.js","connectSingleSocket.js","socketGlobalEventHandle.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;AELA,ADGA,AFMA,ACHA;AELA,ADGA,AFMA,ACHA;AELA,ADGA,AFMA,ACHA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA,AHSA;AELA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,ADGA,AFMA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,AHSA,AIZA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\n\nvar _utils = require('./utils');\n\nvar _connectSocket = require('./connectSocket');\n\nvar _connectSocket2 = _interopRequireDefault(_connectSocket);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar id = 0;\n/**\n * 小程序 Websocket\n * @param       {DOMString}             url       url\n * @param       {DOMString|DOMString[]} protocols Optional 协议\n * @constructor\n */\nfunction WebSocket(url, protocols) {\n  var _this = this;\n\n  if (protocols) {\n    if ((0, _utils.isString)(protocols)) {\n      /* eslint no-param-reassign: off */\n      protocols = [protocols];\n    } else if (!(0, _utils.isArray)(protocols)) {\n      throw new _utils.DOMExceptionError('Failed to construct \\'WebSocket\\': The subprotocol \\'' + protocols + '\\' is invalid.');\n    }\n  }\n\n  // binaryType\n  this.binaryType = '';\n  this.readyState = WebSocket.CONNECTING;\n  this.$id = id;\n  id += 1;\n  this.$options = {\n    url: url,\n    header: {\n      'content-type': 'application/json'\n    },\n    protocols: protocols,\n    method: 'GET'\n  };\n  this.$handler = function (event, res) {\n    if (event === 'close') {\n      _this.readyState = WebSocket.CLOSED;\n    } else if (event === 'open') {\n      _this.readyState = WebSocket.OPEN;\n    }\n    if (_this['on' + event]) {\n      _this['on' + event](res);\n    }\n  };\n  try {\n    this.$socket = (0, _connectSocket2.default)(this);\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\nWebSocket.prototype.send = function send(data) {\n  if (this.readyState === WebSocket.CONNECTING) {\n    throw new _utils.DOMExceptionError(\"Failed to execute 'send' on 'WebSocket': Still in CONNECTING state.\");\n  }\n  if (this.readyState !== WebSocket.OPEN) {\n    console.error('WebSocket is already in CLOSING or CLOSED state.');\n    return;\n  }\n  this.$socket.send({\n    data: data\n  });\n};\n\nWebSocket.prototype.close = function close(code, reason) {\n  this.readyState = WebSocket.CLOSING;\n  if (!this.$socket) {\n    throw new _utils.DOMExceptionError(\"Failed to execute 'close' on 'WebSocket': instance is undefined.\");\n  }\n  this.$socket.close({\n    code: code,\n    reason: reason\n  });\n};\n\nWebSocket.CONNECTING = 0; // The connection is not yet open.\nWebSocket.OPEN = 1; // The connection is open and ready to communicate.\nWebSocket.CLOSING = 2; // The connection is in the process of closing.\nWebSocket.CLOSED = 3; // The connection is closed or couldn't be opened.\n\nmodule.exports = WebSocket;","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction isMy() {\n  return typeof my !== 'undefined';\n}\n\nvar apis = isMy() ? my : wx;\n\nfunction isString(o) {\n  return typeof o === 'string';\n}\n\nfunction isArray(o) {\n  return Object.prototype.toString.call(o) === '[Object array]';\n}\n\n/* eslint-disable no-undef */\nvar DOMExceptionError = typeof DOMException === 'undefined' ? Error : DOMException;\n/* eslint-enable no-undef */\n\nexports.default = {\n  isString: isString,\n  isArray: isArray,\n  DOMExceptionError: DOMExceptionError,\n  isMy: isMy,\n  apis: apis\n};\nexports.isString = isString;\nexports.isArray = isArray;\nexports.DOMExceptionError = DOMExceptionError;\nexports.isMy = isMy;\nexports.apis = apis;","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = connectSocket;\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _connectSingleSocket = require('./connectSingleSocket');\n\nvar _connectSingleSocket2 = _interopRequireDefault(_connectSingleSocket);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = (0, _debug2.default)('socket.io-wxapp-client:connectSocket');\n\nfunction socketEventHandle(handler, socketTask) {\n  socketTask.onOpen(function () {\n    handler('open');\n  });\n  socketTask.onError(function (res) {\n    handler('error', res);\n  });\n  socketTask.onClose(function () {\n    handler('close');\n  });\n  socketTask.onMessage(function (res) {\n    handler('message', res);\n  });\n}\n\n/**\n * 创建websocket链接，支持旧版本全局实例和新版本多实例\n * @param  {Object} options   websocket参数\n * @param  {Object} instance  当前实例\n * @param  {Function} handler 事件响应\n * @return {Object}           rocketTask { send, close },如果是旧版本,则降级为全\n * 局方法\n */\nfunction connectSocket(instance) {\n  if ((0, _utils.isMy)() || (0, _connectSingleSocket.hasSingleSocket)()) {\n    return (0, _connectSingleSocket2.default)(instance);\n  }\n  var socketTask = _utils.apis.connectSocket(instance.$options);\n  if (socketTask) {\n    log('single, 有返回socketTask, 多socket');\n    socketEventHandle(instance.$handler, socketTask);\n    return socketTask;\n  }\n  (0, _connectSingleSocket.setGlobalSocket)(instance);\n  return (0, _connectSingleSocket.createSingleSocketTask)(instance);\n}","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setGlobalSocket = setGlobalSocket;\nexports.hasSingleSocket = hasSingleSocket;\nexports.createSingleSocketTask = createSingleSocketTask;\nexports.default = connectSingleSocket;\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _socketGlobalEventHandle = require('./socketGlobalEventHandle');\n\nvar _socketGlobalEventHandle2 = _interopRequireDefault(_socketGlobalEventHandle);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar globalWebsocket = void 0;\nvar nextGlobalWebsocket = void 0;\nvar log = (0, _debug2.default)('socket.io-wxapp-client:connectSingleSocket');\n\nfunction setGlobalSocket(instance) {\n  globalWebsocket = instance;\n  (0, _socketGlobalEventHandle2.default)(instance.$handler);\n}\n\nfunction hasSingleSocket() {\n  return !!globalWebsocket;\n}\n\nfunction popGlobal() {\n  _utils.apis.connectSocket(nextGlobalWebsocket.$options);\n  setGlobalSocket(nextGlobalWebsocket);\n  nextGlobalWebsocket = undefined;\n}\n\nfunction createSingleSocketTask(instance) {\n  return {\n    send: function send(ops) {\n      if (globalWebsocket !== instance) {\n        log('error send', 'globalWebsocket !== instance', ops);\n        return;\n      }\n      _utils.apis.sendSocketMessage(ops);\n    },\n    close: function close(ops) {\n      if (globalWebsocket !== instance) {\n        log('error close', 'globalWebsocket !== instance', ops);\n        instance.$handler('close');\n        return;\n      }\n\n      _utils.apis.closeSocket(Object.assign({\n        success: function success(res) {\n          log('closeSocket success', res);\n          if (nextGlobalWebsocket) {\n            log('nextGlobalWebsocket将连接');\n            popGlobal();\n          }\n        },\n        fail: function fail(err) {\n          log('closeSocket fail', err);\n        }\n      }, ops));\n    }\n  };\n}\n\nfunction connect(instance) {\n  if (nextGlobalWebsocket) {\n    log('nextGlobalWebsocket被跳过');\n    nextGlobalWebsocket = instance;\n    return;\n  }\n  nextGlobalWebsocket = instance;\n\n  if (!globalWebsocket) {\n    log('websocket将连接');\n    popGlobal();\n    return;\n  }\n\n  if (globalWebsocket.readyState === 3) {\n    log('当前socket为断开状态，将打开新socket');\n    popGlobal();\n    return;\n  }\n\n  globalWebsocket.close();\n}\n\nfunction connectSingleSocket(instance) {\n  connect(instance);\n  return createSingleSocketTask(instance);\n}","\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar log = (0, _debug2.default)('socket.io-wxapp-client:socketGlobalEventHandle');\nvar isInitSocketGlobalEvent = false;\n\nvar defaultGloableEventHandler = function defaultGloableEventHandler() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  log('没有socket全局处理事件 %O', args);\n};\n\nfunction mySocketGlobalEventHandle() {\n  var handler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultGloableEventHandler;\n\n  // 绑定全局监听initListen\n  my.onSocketOpen(function () {\n    handler('open');\n  });\n\n  my.onSocketError(function (res) {\n    handler('error', res);\n  });\n\n  my.onSocketClose(function () {\n    handler('close');\n  });\n\n  my.onSocketMessage(function (res) {\n    log('message', res);\n    handler('message', res);\n  });\n}\n\n// 全局事件接受者\nvar gloableEventHandler = void 0;\n/**\n * 监听小程序socket全局的事件\n * @param  {Function} handler 事件接受者\n */\nfunction weSocketGlobalEventHandle() {\n  var handler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultGloableEventHandler;\n\n  // 设置全局事件接受者\n  gloableEventHandler = handler;\n\n  if (isInitSocketGlobalEvent) {\n    return;\n  }\n  isInitSocketGlobalEvent = true;\n\n  // 绑定全局监听initListen\n  wx.onSocketOpen(function () {\n    gloableEventHandler('open');\n  });\n\n  wx.onSocketError(function (res) {\n    gloableEventHandler('error', res);\n  });\n\n  wx.onSocketClose(function () {\n    gloableEventHandler('close');\n  });\n\n  wx.onSocketMessage(function (res) {\n    log('message', res);\n    gloableEventHandler('message', res);\n  });\n}\n\nexports.default = (0, _utils.isMy)() ? mySocketGlobalEventHandle : weSocketGlobalEventHandle;"]}