'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setGlobalSocket = setGlobalSocket;
exports.hasSingleSocket = hasSingleSocket;
exports.createSingleSocketTask = createSingleSocketTask;
exports.default = connectSingleSocket;

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _socketGlobalEventHandle = require('./socketGlobalEventHandle');

var _socketGlobalEventHandle2 = _interopRequireDefault(_socketGlobalEventHandle);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var globalWebsocket = void 0;
var nextGlobalWebsocket = void 0;
var log = (0, _debug2.default)('socket.io-wxapp-client:connectSingleSocket');

function setGlobalSocket(instance) {
  globalWebsocket = instance;
  (0, _socketGlobalEventHandle2.default)(instance.$handler);
}

function hasSingleSocket() {
  return !!globalWebsocket;
}

function popGlobal() {
  _utils.apis.connectSocket(nextGlobalWebsocket.$options);
  setGlobalSocket(nextGlobalWebsocket);
  nextGlobalWebsocket = undefined;
}

function createSingleSocketTask(instance) {
  return {
    send: function send(ops) {
      if (globalWebsocket !== instance) {
        log('error send', 'globalWebsocket !== instance', ops);
        return;
      }
      _utils.apis.sendSocketMessage(ops);
    },
    close: function close(ops) {
      if (globalWebsocket !== instance) {
        log('error close', 'globalWebsocket !== instance', ops);
        instance.$handler('close');
        return;
      }

      _utils.apis.closeSocket(Object.assign({
        success: function success(res) {
          log('closeSocket success', res);
          if (nextGlobalWebsocket) {
            log('nextGlobalWebsocket将连接');
            popGlobal();
          }
        },
        fail: function fail(err) {
          log('closeSocket fail', err);
        }
      }, ops));
    }
  };
}

function connect(instance) {
  if (nextGlobalWebsocket) {
    log('nextGlobalWebsocket被跳过');
    nextGlobalWebsocket = instance;
    return;
  }
  nextGlobalWebsocket = instance;

  if (!globalWebsocket) {
    log('websocket将连接');
    popGlobal();
    return;
  }

  if (globalWebsocket.readyState === 3) {
    log('当前socket为断开状态，将打开新socket');
    popGlobal();
    return;
  }

  globalWebsocket.close();
}

function connectSingleSocket(instance) {
  connect(instance);
  return createSingleSocketTask(instance);
}