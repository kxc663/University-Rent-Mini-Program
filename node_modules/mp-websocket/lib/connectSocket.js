'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = connectSocket;

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _connectSingleSocket = require('./connectSingleSocket');

var _connectSingleSocket2 = _interopRequireDefault(_connectSingleSocket);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = (0, _debug2.default)('socket.io-wxapp-client:connectSocket');

function socketEventHandle(handler, socketTask) {
  socketTask.onOpen(function () {
    handler('open');
  });
  socketTask.onError(function (res) {
    handler('error', res);
  });
  socketTask.onClose(function () {
    handler('close');
  });
  socketTask.onMessage(function (res) {
    handler('message', res);
  });
}

/**
 * 创建websocket链接，支持旧版本全局实例和新版本多实例
 * @param  {Object} options   websocket参数
 * @param  {Object} instance  当前实例
 * @param  {Function} handler 事件响应
 * @return {Object}           rocketTask { send, close },如果是旧版本,则降级为全
 * 局方法
 */
function connectSocket(instance) {
  if ((0, _utils.isMy)() || (0, _connectSingleSocket.hasSingleSocket)()) {
    return (0, _connectSingleSocket2.default)(instance);
  }
  var socketTask = _utils.apis.connectSocket(instance.$options);
  if (socketTask) {
    log('single, 有返回socketTask, 多socket');
    socketEventHandle(instance.$handler, socketTask);
    return socketTask;
  }
  (0, _connectSingleSocket.setGlobalSocket)(instance);
  return (0, _connectSingleSocket.createSingleSocketTask)(instance);
}