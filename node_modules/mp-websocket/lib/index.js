'use strict';

var _utils = require('./utils');

var _connectSocket = require('./connectSocket');

var _connectSocket2 = _interopRequireDefault(_connectSocket);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var id = 0;
/**
 * 小程序 Websocket
 * @param       {DOMString}             url       url
 * @param       {DOMString|DOMString[]} protocols Optional 协议
 * @constructor
 */
function WebSocket(url, protocols) {
  var _this = this;

  if (protocols) {
    if ((0, _utils.isString)(protocols)) {
      /* eslint no-param-reassign: off */
      protocols = [protocols];
    } else if (!(0, _utils.isArray)(protocols)) {
      throw new _utils.DOMExceptionError('Failed to construct \'WebSocket\': The subprotocol \'' + protocols + '\' is invalid.');
    }
  }

  // binaryType
  this.binaryType = '';
  this.readyState = WebSocket.CONNECTING;
  this.$id = id;
  id += 1;
  this.$options = {
    url: url,
    header: {
      'content-type': 'application/json'
    },
    protocols: protocols,
    method: 'GET'
  };
  this.$handler = function (event, res) {
    if (event === 'close') {
      _this.readyState = WebSocket.CLOSED;
    } else if (event === 'open') {
      _this.readyState = WebSocket.OPEN;
    }
    if (_this['on' + event]) {
      _this['on' + event](res);
    }
  };
  try {
    this.$socket = (0, _connectSocket2.default)(this);
  } catch (error) {
    console.error(error);
    throw error;
  }
}

WebSocket.prototype.send = function send(data) {
  if (this.readyState === WebSocket.CONNECTING) {
    throw new _utils.DOMExceptionError("Failed to execute 'send' on 'WebSocket': Still in CONNECTING state.");
  }
  if (this.readyState !== WebSocket.OPEN) {
    console.error('WebSocket is already in CLOSING or CLOSED state.');
    return;
  }
  this.$socket.send({
    data: data
  });
};

WebSocket.prototype.close = function close(code, reason) {
  this.readyState = WebSocket.CLOSING;
  if (!this.$socket) {
    throw new _utils.DOMExceptionError("Failed to execute 'close' on 'WebSocket': instance is undefined.");
  }
  this.$socket.close({
    code: code,
    reason: reason
  });
};

WebSocket.CONNECTING = 0; // The connection is not yet open.
WebSocket.OPEN = 1; // The connection is open and ready to communicate.
WebSocket.CLOSING = 2; // The connection is in the process of closing.
WebSocket.CLOSED = 3; // The connection is closed or couldn't be opened.

module.exports = WebSocket;